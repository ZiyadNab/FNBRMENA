name: Auto Deploy FNBRMENA Bot

on:
  push:
    branches:
      - master
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Create TAR file
        run: |
          tar -cvf FNBRMENA.tar App Dockerfile

      - name: Transfer TAR file to VM
        run: |
          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << EOF
            mkdir /tmp/fnbrmena_repo
            scp -o StrictHostKeyChecking=no FNBRMENA.tar ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/tmp/fnbrmena_repo/
          EOF

      - name: Deploy and Build Docker image on VM
        run: |
          sshpass -p "${{ secrets.VM_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << EOF
            cd /tmp/fnbrmena_repo
            tar -xf FNBRMENA.tar
            rm -rf FNBRMENA.tar
            rmdir /tmp/fnbrmena_repo
            
            # Determine the correct Docker image and container names based on the branch
            branch_name="${GITHUB_REF##*/}"
            image_name="fnbrmena_image_\${branch_name}"
            container_name="FNBRMENA_CONTAINER_\${branch_name}"

            docker rm -f \${container_name} || true
            docker rmi \${image_name} || true
            docker build --no-cache -t \${image_name}:latest .
            
            # Determine the correct Discord token based on the branch
            if [ "\${branch_name}" == "master" ]; then
              discord_token="${{ secrets.PRD_DISCORD_TOKEN }}"
              guild_id="${{ secrets.PRD_GUILD_ID }}"
              client_id_discord="${{ secrets.PRD_CLIENT_ID }}"
            else
              discord_token="${{ secrets.DEV_DISCORD_TOKEN }}"
              guild_id="${{ secrets.DEV_GUILD_ID }}"
              client_id_discord="${{ secrets.DEV_CLIENT_ID }}"
            fi
            
            docker run -d --name \${container_name} \
              --restart always \
              -e type="${{ secrets.FIREBASE_TYPE }}" \
              -e project_id="${{ secrets.FIREBASE_PROJECT_ID }}" \
              -e private_key_id="${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" \
              -e private_key="${{ secrets.FIREBASE_PRIVATE_KEY }}" \
              -e client_email="${{ secrets.FIREBASE_CLIENT_EMAIL }}" \
              -e client_id="${{ secrets.FIREBASE_CLIENT_ID }}" \
              -e auth_uri="${{ secrets.FIREBASE_AUTH_URI }}" \
              -e token_uri="${{ secrets.FIREBASE_TOKEN_URI }}" \
              -e auth_provider_x509_cert_url="${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}" \
              -e client_x509_cert_url="${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}" \
              -e universe_domain="${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}" \
              -e discord_token="\${discord_token}" \
              -e guild_id="\${guild_id}" \
              -e client_id_discord="\${client_id_discord}" \
              \${image_name}:latest
            rm -rf *
          EOF
